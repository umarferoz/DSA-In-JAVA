import java.util.*;

public class Main {
    public static void main(String[] args) {
        GraphMatrix graph = new GraphMatrix(5);  // Graph with 5 vertices (0-4)

        // Add undirected edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);

        // Print adjacency matrix
        graph.printGraph();

        // BFS and DFS traversals
        graph.bfs(0);
        graph.dfs(0);
    }
}

public class GraphMatrix {
    private int vertices;
    private int[][] matrix;

    // Constructor
    public GraphMatrix(int v) {
        vertices = v;
        matrix = new int[v][v];  // default 0
    }

    // Add undirected edge
    public void addEdge(int source, int destination) {
        matrix[source][destination] = 1;
        matrix[destination][source] = 1; // because undirected
    }

    // Print adjacency matrix
    public void printGraph() {
        System.out.println("Adjacency Matrix:");
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    // BFS traversal
    public void bfs(int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[start] = true;
        queue.add(start);

        System.out.print("BFS Traversal: ");

        while (!queue.isEmpty()) {
            int current = queue.poll();
            System.out.print(current + " ");

            // Check all adjacent nodes
            for (int i = 0; i < vertices; i++) {
                if (matrix[current][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
        System.out.println();
    }

    // DFS traversal
    public void dfs(int start) {
        boolean[] visited = new boolean[vertices];
        System.out.print("DFS Traversal: ");
        dfsHelper(start, visited);
        System.out.println();
    }

    // DFS helper (recursive)
    private void dfsHelper(int current, boolean[] visited) {
        visited[current] = true;
        System.out.print(current + " ");

        for (int i = 0; i < vertices; i++) {
            if (matrix[current][i] == 1 && !visited[i]) {
                dfsHelper(i, visited);
            }
        }
    }
}
